Abstract syntax tree of ts_py_example.py. Start and end points of nodes are 0-indexed.
Below the ast are the non-import logging occurrences and their logical parent's ast subtree.
<Node kind=module, start_point=(0, 0), end_point=(18, 5)>
  <Node kind=import_statement, start_point=(0, 0), end_point=(0, 14)>
    <Node kind=dotted_name, start_point=(0, 7), end_point=(0, 14)>
      <Node kind=identifier, start_point=(0, 7), end_point=(0, 14)>
  <Node kind=import_statement, start_point=(1, 0), end_point=(1, 10)>
    <Node kind=dotted_name, start_point=(1, 7), end_point=(1, 10)>
      <Node kind=identifier, start_point=(1, 7), end_point=(1, 10)>
  <Node kind=expression_statement, start_point=(3, 0), end_point=(3, 82)>
    <Node kind=call, start_point=(3, 0), end_point=(3, 82)>
      <Node kind=attribute, start_point=(3, 0), end_point=(3, 19)>
        <Node kind=identifier, start_point=(3, 0), end_point=(3, 7)>
        <Node kind=identifier, start_point=(3, 8), end_point=(3, 19)>
      <Node kind=argument_list, start_point=(3, 19), end_point=(3, 82)>
        <Node kind=keyword_argument, start_point=(3, 20), end_point=(3, 46)>
          <Node kind=identifier, start_point=(3, 20), end_point=(3, 28)>
          <Node kind=binary_operator, start_point=(3, 29), end_point=(3, 46)>
            <Node kind=identifier, start_point=(3, 29), end_point=(3, 37)>
            <Node kind=string, start_point=(3, 40), end_point=(3, 46)>
        <Node kind=keyword_argument, start_point=(3, 48), end_point=(3, 60)>
          <Node kind=identifier, start_point=(3, 48), end_point=(3, 56)>
          <Node kind=string, start_point=(3, 57), end_point=(3, 60)>
        <Node kind=keyword_argument, start_point=(3, 62), end_point=(3, 81)>
          <Node kind=identifier, start_point=(3, 62), end_point=(3, 67)>
          <Node kind=attribute, start_point=(3, 68), end_point=(3, 81)>
            <Node kind=identifier, start_point=(3, 68), end_point=(3, 75)>
            <Node kind=identifier, start_point=(3, 76), end_point=(3, 81)>
  <Node kind=function_definition, start_point=(6, 0), end_point=(15, 18)>
    <Node kind=identifier, start_point=(6, 4), end_point=(6, 7)>
    <Node kind=parameters, start_point=(6, 7), end_point=(6, 9)>
    <Node kind=comment, start_point=(7, 4), end_point=(7, 23)>
    <Node kind=block, start_point=(8, 4), end_point=(15, 18)>
      <Node kind=expression_statement, start_point=(8, 4), end_point=(8, 9)>
        <Node kind=assignment, start_point=(8, 4), end_point=(8, 9)>
          <Node kind=identifier, start_point=(8, 4), end_point=(8, 5)>
          <Node kind=integer, start_point=(8, 8), end_point=(8, 9)>
      <Node kind=if_statement, start_point=(9, 4), end_point=(10, 28)>
        <Node kind=comparison_operator, start_point=(9, 7), end_point=(9, 13)>
          <Node kind=identifier, start_point=(9, 7), end_point=(9, 8)>
          <Node kind=integer, start_point=(9, 12), end_point=(9, 13)>
        <Node kind=block, start_point=(10, 8), end_point=(10, 28)>
          <Node kind=expression_statement, start_point=(10, 8), end_point=(10, 28)>
            <Node kind=call, start_point=(10, 8), end_point=(10, 28)>
              <Node kind=attribute, start_point=(10, 8), end_point=(10, 20)>
                <Node kind=identifier, start_point=(10, 8), end_point=(10, 15)>
                <Node kind=identifier, start_point=(10, 16), end_point=(10, 20)>
              <Node kind=argument_list, start_point=(10, 20), end_point=(10, 28)>
                <Node kind=string, start_point=(10, 21), end_point=(10, 27)>
      <Node kind=try_statement, start_point=(11, 4), end_point=(15, 18)>
        <Node kind=block, start_point=(12, 8), end_point=(12, 17)>
          <Node kind=expression_statement, start_point=(12, 8), end_point=(12, 17)>
            <Node kind=assignment, start_point=(12, 8), end_point=(12, 17)>
              <Node kind=identifier, start_point=(12, 8), end_point=(12, 9)>
              <Node kind=binary_operator, start_point=(12, 12), end_point=(12, 17)>
                <Node kind=identifier, start_point=(12, 12), end_point=(12, 13)>
                <Node kind=integer, start_point=(12, 16), end_point=(12, 17)>
        <Node kind=except_clause, start_point=(13, 4), end_point=(15, 18)>
          <Node kind=as_pattern, start_point=(13, 11), end_point=(13, 33)>
            <Node kind=identifier, start_point=(13, 11), end_point=(13, 28)>
            <Node kind=as_pattern_target, start_point=(13, 32), end_point=(13, 33)>
              <Node kind=identifier, start_point=(13, 32), end_point=(13, 33)>
          <Node kind=block, start_point=(14, 8), end_point=(15, 18)>
            <Node kind=expression_statement, start_point=(14, 8), end_point=(14, 24)>
              <Node kind=call, start_point=(14, 8), end_point=(14, 24)>
                <Node kind=attribute, start_point=(14, 8), end_point=(14, 21)>
                  <Node kind=identifier, start_point=(14, 8), end_point=(14, 15)>
                  <Node kind=identifier, start_point=(14, 16), end_point=(14, 21)>
                <Node kind=argument_list, start_point=(14, 21), end_point=(14, 24)>
                  <Node kind=identifier, start_point=(14, 22), end_point=(14, 23)>
            <Node kind=expression_statement, start_point=(15, 8), end_point=(15, 18)>
              <Node kind=call, start_point=(15, 8), end_point=(15, 18)>
                <Node kind=attribute, start_point=(15, 8), end_point=(15, 16)>
                  <Node kind=identifier, start_point=(15, 8), end_point=(15, 11)>
                  <Node kind=identifier, start_point=(15, 12), end_point=(15, 16)>
                <Node kind=argument_list, start_point=(15, 16), end_point=(15, 18)>
  <Node kind=expression_statement, start_point=(18, 0), end_point=(18, 5)>
    <Node kind=call, start_point=(18, 0), end_point=(18, 5)>
      <Node kind=identifier, start_point=(18, 0), end_point=(18, 3)>
      <Node kind=argument_list, start_point=(18, 3), end_point=(18, 5)>
################################################################################
Line 11: logging.info("Five")
<Node kind=if_statement, start_point=(9, 4), end_point=(10, 28)>
  <Node kind=comparison_operator, start_point=(9, 7), end_point=(9, 13)>
    <Node kind=identifier, start_point=(9, 7), end_point=(9, 8)>
    <Node kind=integer, start_point=(9, 12), end_point=(9, 13)>
  <Node kind=block, start_point=(10, 8), end_point=(10, 28)>
    <Node kind=expression_statement, start_point=(10, 8), end_point=(10, 28)>
      <Node kind=call, start_point=(10, 8), end_point=(10, 28)>
        <Node kind=attribute, start_point=(10, 8), end_point=(10, 20)>
          <Node kind=identifier, start_point=(10, 8), end_point=(10, 15)>
          <Node kind=identifier, start_point=(10, 16), end_point=(10, 20)>
        <Node kind=argument_list, start_point=(10, 20), end_point=(10, 28)>
          <Node kind=string, start_point=(10, 21), end_point=(10, 27)>
################################################################################
Line 15: logging.error(e)
<Node kind=except_clause, start_point=(13, 4), end_point=(15, 18)>
  <Node kind=as_pattern, start_point=(13, 11), end_point=(13, 33)>
    <Node kind=identifier, start_point=(13, 11), end_point=(13, 28)>
    <Node kind=as_pattern_target, start_point=(13, 32), end_point=(13, 33)>
      <Node kind=identifier, start_point=(13, 32), end_point=(13, 33)>
  <Node kind=block, start_point=(14, 8), end_point=(15, 18)>
    <Node kind=expression_statement, start_point=(14, 8), end_point=(14, 24)>
      <Node kind=call, start_point=(14, 8), end_point=(14, 24)>
        <Node kind=attribute, start_point=(14, 8), end_point=(14, 21)>
          <Node kind=identifier, start_point=(14, 8), end_point=(14, 15)>
          <Node kind=identifier, start_point=(14, 16), end_point=(14, 21)>
        <Node kind=argument_list, start_point=(14, 21), end_point=(14, 24)>
          <Node kind=identifier, start_point=(14, 22), end_point=(14, 23)>
    <Node kind=expression_statement, start_point=(15, 8), end_point=(15, 18)>
      <Node kind=call, start_point=(15, 8), end_point=(15, 18)>
        <Node kind=attribute, start_point=(15, 8), end_point=(15, 16)>
          <Node kind=identifier, start_point=(15, 8), end_point=(15, 11)>
          <Node kind=identifier, start_point=(15, 12), end_point=(15, 16)>
        <Node kind=argument_list, start_point=(15, 16), end_point=(15, 18)>